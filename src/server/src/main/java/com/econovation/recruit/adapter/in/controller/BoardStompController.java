package com.econovation.recruit.adapter.in.controller;import com.econovation.recruit.application.port.in.BoardUseCase;import com.econovation.recruit.domain.board.Board;import com.econovation.recruit.domain.model.BoardMessage;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.messaging.handler.annotation.MessageMapping;import org.springframework.messaging.simp.SimpMessagingTemplate;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.List;import java.util.Map;@RestController@RequestMapping("/api/v1")@RequiredArgsConstructor@Slf4jpublic class BoardStompController {    private final BoardUseCase boardUseCase;    private final SimpMessagingTemplate template; //특정 Broker로 메세지를 전달    //Client 가 SEND 할 수 있는 경로    //stompConfig 에서 설정한 applicationDestinationPrefixes 와 @MessageMapping 경로가 병합됨    //"/pub/chat/enter"    @MessageMapping(value = "/board/enter")    public void enter(BoardMessage message) {        List<Board> cards = boardUseCase.findAllByNavLoc(message.getNavLoc());//        cards.toString()        message.setMessage(cards.toString());        message.setMessage("idpId : " + message.getIdpId() + " / entered");        template.convertAndSend("/sub/board", message);        log.info(message.getIdpId() + " : " + message.getMessage());        log.info("들어온 메세지 : "+message);//      채팅이력 저장하기        // navCol colLoc 로 newestLocation조회        //해당 location에 insert        Map<String, Integer> newestLocationByNavLocAndColLoc = boardUseCase.getNewestLocationByNavLocAndColLoc(message.getNavLoc(), message.getColLoc());        Board board = boardUseCase.createWorkBoard(message.getMessage(),message.getNavLoc(),                newestLocationByNavLocAndColLoc.get("colLoc"), newestLocationByNavLocAndColLoc.get("lowLoc"));    }    //메시지를 보냄    @MessageMapping(value = "/board/message")    public void createCard(BoardMessage message) {        template.convertAndSend("/sub/board", message);        System.out.println("들어온 메세지 : "+message);        // DB에 채팅내용 저장        Map<String, Integer> newestLocationByNavLocAndColLoc = boardUseCase.getNewestLocationByNavLocAndColLoc(message.getNavLoc(), message.getColLoc());        Board board = boardUseCase.createWorkBoard(message.getMessage(),message.getNavLoc(),                newestLocationByNavLocAndColLoc.get("colLoc"), newestLocationByNavLocAndColLoc.get("lowLoc"));    }}